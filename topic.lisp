(in-package #:mess)

(defmethod navigation-bar ((obj topic))
  (with-html-output-to-string (s)
    ((:div :class "navbar")
     ((:a :href (make-url "/"))
      "HOME"))))

(defmethod navigation-bar ((obj linked-class))
  (with-html-output-to-string (s)
    ((:div :class "navbar")
     ((:a :href (make-url "/"))
      "HOME"))))

(defmethod render ((obj topic))
  (let* ((objs (find-linked-objects obj)))
    (flet ((list-of-type (type)
	     (if-bind (linked-objects (find-linked-objects-of-type obj type))
		 (let ((presentable-name (make-presentable (symbol-name type))))
		   (htmlo ((:td :valign "top")
			   (htm (:h2 (str presentable-name))) 
			   (str (display-as-list (safe-sort (find-linked-objects-of-type obj type) #'object-sort)
						 #'display-short)))))
	       (htmlo ((:td ""))))))
      (make-page (display-nano obj)
		 :header "" ; (htmlo )
		 :nav (make-navigation obj)
		 :sidebar (htmlo
			    (when (get-priv (type-of obj))
			      (str (edit-bar obj))) 
			    ((:div :class "contentbox")
			     (:h2 "From this book")
			     (flet ((display-if (name type objects)
				      (let ((something (random-elt (find-objects-of-type type objects))))
					(if something
					    (htm (:h3 (str name))
						 (if (eq type 'picture)
						     (str (display-thumb something))
						     (htm (:p (str (display-short something))))))
					    ""))))
			       (display-if "Image" 'picture objs)
			       (display-if "Key personality" 'personality objs)
			       (display-if "Key concept" 'concept objs)
			       (display-if "Case study" 'case-study objs)))
			    (str (last-links)))
		 :content (htmlo (:h1 (fmt "~A, ~A&ndash;~A." (name obj) (begin-year obj) (end-year obj)))
				 (:table (:tr (str (list-of-type 'perspective))
					      (str (list-of-type 'case-study)))
					 (:tr (str (list-of-type 'personality))
					      (str (list-of-type 'concept)))))))))

(defun display-as-list (objects render-func &optional (ordered t))
  (let ((list (htmlo (dolist (o objects) (htm (:li (str (funcall render-func o))))))))
    (htmlo (if ordered
	       (htm (:ol (str list)))
	       (htm (:ul (str list)))))))

(defmethod edit-bar ((obj topic))
  "")

;; (with-std-page ((display-nano obj))
;;   ((:div :id "navBeta")
;;    )
;;   (str (navigation-bar obj))
;;   ((:div :class "contentwide")
;;    (:h1 (fmt "~A, ~A&ndash;~A." (name obj) (begin-year obj) (end-year obj))))
;;   ((:div :class "contentwide")
;;    (when (get-priv (class-name (class-of obj)))
;;      (htm (str (edit-bar obj))))
;;    ))))

(defmethod display-short ((obj topic))
  (with-slots (name begin-year end-year) obj
    (with-html-output-to-string (s)
      ((:a :href (make-view-url obj))
	   (str name))
      (fmt ", ~A&ndash;~A." begin-year end-year))))

(defmethod display-nano ((obj topic))
  (with-slots (name begin-year end-year)
      obj
    (format nil "~A, ~A--~A" name begin-year end-year)))

